
CAN_Case_Study_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080018ec  080018ec  000028ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001910  08001910  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001910  08001910  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001910  08001910  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001910  08001910  00002910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001914  08001914  00002914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001918  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000000c  08001924  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08001924  00003054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c1e  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011fe  00000000  00000000  00007c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000550  00000000  00000000  00008e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004b8  00000000  00000000  000093a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b3d  00000000  00000000  00009860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000062ec  00000000  00000000  0001f39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c29c  00000000  00000000  00025689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a1925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013f4  00000000  00000000  000a1968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080018d4 	.word	0x080018d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080018d4 	.word	0x080018d4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9a2 	bl	8000498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f806 	bl	8000164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f876 	bl	8000248 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f83e 	bl	80001dc <MX_CAN_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000160:	bf00      	nop
 8000162:	e7fd      	b.n	8000160 <main+0x14>

08000164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b090      	sub	sp, #64	@ 0x40
 8000168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016a:	f107 0318 	add.w	r3, r7, #24
 800016e:	2228      	movs	r2, #40	@ 0x28
 8000170:	2100      	movs	r1, #0
 8000172:	4618      	mov	r0, r3
 8000174:	f001 fb82 	bl	800187c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000178:	1d3b      	adds	r3, r7, #4
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]
 8000184:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000186:	2302      	movs	r3, #2
 8000188:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800018a:	2301      	movs	r3, #1
 800018c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800018e:	2310      	movs	r3, #16
 8000190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000192:	2300      	movs	r3, #0
 8000194:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	4618      	mov	r0, r3
 800019c:	f000 ff90 	bl	80010c0 <HAL_RCC_OscConfig>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001a6:	f000 f865 	bl	8000274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001aa:	230f      	movs	r3, #15
 80001ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ae:	2300      	movs	r3, #0
 80001b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001b2:	2300      	movs	r3, #0
 80001b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001b6:	2300      	movs	r3, #0
 80001b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ba:	2300      	movs	r3, #0
 80001bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 f9fe 	bl	80015c4 <HAL_RCC_ClockConfig>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001ce:	f000 f851 	bl	8000274 <Error_Handler>
  }
}
 80001d2:	bf00      	nop
 80001d4:	3740      	adds	r7, #64	@ 0x40
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
	...

080001dc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80001e0:	4b17      	ldr	r3, [pc, #92]	@ (8000240 <MX_CAN_Init+0x64>)
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <MX_CAN_Init+0x68>)
 80001e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 80001e6:	4b16      	ldr	r3, [pc, #88]	@ (8000240 <MX_CAN_Init+0x64>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80001ec:	4b14      	ldr	r3, [pc, #80]	@ (8000240 <MX_CAN_Init+0x64>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001f2:	4b13      	ldr	r3, [pc, #76]	@ (8000240 <MX_CAN_Init+0x64>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80001f8:	4b11      	ldr	r3, [pc, #68]	@ (8000240 <MX_CAN_Init+0x64>)
 80001fa:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80001fe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000200:	4b0f      	ldr	r3, [pc, #60]	@ (8000240 <MX_CAN_Init+0x64>)
 8000202:	2200      	movs	r2, #0
 8000204:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000206:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <MX_CAN_Init+0x64>)
 8000208:	2200      	movs	r2, #0
 800020a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800020c:	4b0c      	ldr	r3, [pc, #48]	@ (8000240 <MX_CAN_Init+0x64>)
 800020e:	2200      	movs	r2, #0
 8000210:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000212:	4b0b      	ldr	r3, [pc, #44]	@ (8000240 <MX_CAN_Init+0x64>)
 8000214:	2200      	movs	r2, #0
 8000216:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000218:	4b09      	ldr	r3, [pc, #36]	@ (8000240 <MX_CAN_Init+0x64>)
 800021a:	2200      	movs	r2, #0
 800021c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800021e:	4b08      	ldr	r3, [pc, #32]	@ (8000240 <MX_CAN_Init+0x64>)
 8000220:	2200      	movs	r2, #0
 8000222:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000224:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <MX_CAN_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800022a:	4805      	ldr	r0, [pc, #20]	@ (8000240 <MX_CAN_Init+0x64>)
 800022c:	f000 f996 	bl	800055c <HAL_CAN_Init>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000236:	f000 f81d 	bl	8000274 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	20000028 	.word	0x20000028
 8000244:	40006400 	.word	0x40006400

08000248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024e:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <MX_GPIO_Init+0x28>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	4a07      	ldr	r2, [pc, #28]	@ (8000270 <MX_GPIO_Init+0x28>)
 8000254:	f043 0304 	orr.w	r3, r3, #4
 8000258:	6193      	str	r3, [r2, #24]
 800025a:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <MX_GPIO_Init+0x28>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	f003 0304 	and.w	r3, r3, #4
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr
 8000270:	40021000 	.word	0x40021000

08000274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000278:	b672      	cpsid	i
}
 800027a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800027c:	bf00      	nop
 800027e:	e7fd      	b.n	800027c <Error_Handler+0x8>

08000280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000286:	4b15      	ldr	r3, [pc, #84]	@ (80002dc <HAL_MspInit+0x5c>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	4a14      	ldr	r2, [pc, #80]	@ (80002dc <HAL_MspInit+0x5c>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6193      	str	r3, [r2, #24]
 8000292:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <HAL_MspInit+0x5c>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	60bb      	str	r3, [r7, #8]
 800029c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800029e:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <HAL_MspInit+0x5c>)
 80002a0:	69db      	ldr	r3, [r3, #28]
 80002a2:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <HAL_MspInit+0x5c>)
 80002a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002a8:	61d3      	str	r3, [r2, #28]
 80002aa:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <HAL_MspInit+0x5c>)
 80002ac:	69db      	ldr	r3, [r3, #28]
 80002ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002b6:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <HAL_MspInit+0x60>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	60fb      	str	r3, [r7, #12]
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	4a04      	ldr	r2, [pc, #16]	@ (80002e0 <HAL_MspInit+0x60>)
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002d2:	bf00      	nop
 80002d4:	3714      	adds	r7, #20
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40010000 	.word	0x40010000

080002e4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ec:	f107 0310 	add.w	r3, r7, #16
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a28      	ldr	r2, [pc, #160]	@ (80003a0 <HAL_CAN_MspInit+0xbc>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d149      	bne.n	8000398 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000304:	4b27      	ldr	r3, [pc, #156]	@ (80003a4 <HAL_CAN_MspInit+0xc0>)
 8000306:	69db      	ldr	r3, [r3, #28]
 8000308:	4a26      	ldr	r2, [pc, #152]	@ (80003a4 <HAL_CAN_MspInit+0xc0>)
 800030a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800030e:	61d3      	str	r3, [r2, #28]
 8000310:	4b24      	ldr	r3, [pc, #144]	@ (80003a4 <HAL_CAN_MspInit+0xc0>)
 8000312:	69db      	ldr	r3, [r3, #28]
 8000314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b21      	ldr	r3, [pc, #132]	@ (80003a4 <HAL_CAN_MspInit+0xc0>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a20      	ldr	r2, [pc, #128]	@ (80003a4 <HAL_CAN_MspInit+0xc0>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b1e      	ldr	r3, [pc, #120]	@ (80003a4 <HAL_CAN_MspInit+0xc0>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	60bb      	str	r3, [r7, #8]
 8000332:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000334:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000338:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	4619      	mov	r1, r3
 8000348:	4817      	ldr	r0, [pc, #92]	@ (80003a8 <HAL_CAN_MspInit+0xc4>)
 800034a:	f000 fd3d 	bl	8000dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800034e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000354:	2302      	movs	r3, #2
 8000356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000358:	2303      	movs	r3, #3
 800035a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	@ (80003a8 <HAL_CAN_MspInit+0xc4>)
 8000364:	f000 fd30 	bl	8000dc8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000368:	2200      	movs	r2, #0
 800036a:	2100      	movs	r1, #0
 800036c:	2013      	movs	r0, #19
 800036e:	f000 fcf4 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000372:	2013      	movs	r0, #19
 8000374:	f000 fd0d 	bl	8000d92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000378:	2200      	movs	r2, #0
 800037a:	2100      	movs	r1, #0
 800037c:	2014      	movs	r0, #20
 800037e:	f000 fcec 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000382:	2014      	movs	r0, #20
 8000384:	f000 fd05 	bl	8000d92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000388:	2200      	movs	r2, #0
 800038a:	2100      	movs	r1, #0
 800038c:	2016      	movs	r0, #22
 800038e:	f000 fce4 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000392:	2016      	movs	r0, #22
 8000394:	f000 fcfd 	bl	8000d92 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000398:	bf00      	nop
 800039a:	3720      	adds	r7, #32
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40006400 	.word	0x40006400
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010800 	.word	0x40010800

080003ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <NMI_Handler+0x4>

080003b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b8:	bf00      	nop
 80003ba:	e7fd      	b.n	80003b8 <HardFault_Handler+0x4>

080003bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <MemManage_Handler+0x4>

080003c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <BusFault_Handler+0x4>

080003cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <UsageFault_Handler+0x4>

080003d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr

080003ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fc:	f000 f892 	bl	8000524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800040a:	f000 f9a2 	bl	8000752 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000028 	.word	0x20000028

08000418 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800041e:	f000 f998 	bl	8000752 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000028 	.word	0x20000028

0800042c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <CAN1_SCE_IRQHandler+0x10>)
 8000432:	f000 f98e 	bl	8000752 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000028 	.word	0x20000028

08000440 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800044c:	f7ff fff8 	bl	8000440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480b      	ldr	r0, [pc, #44]	@ (8000480 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000452:	490c      	ldr	r1, [pc, #48]	@ (8000484 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000454:	4a0c      	ldr	r2, [pc, #48]	@ (8000488 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a09      	ldr	r2, [pc, #36]	@ (800048c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000468:	4c09      	ldr	r4, [pc, #36]	@ (8000490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000476:	f001 fa09 	bl	800188c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047a:	f7ff fe67 	bl	800014c <main>
  bx lr
 800047e:	4770      	bx	lr
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000488:	08001918 	.word	0x08001918
  ldr r2, =_sbss
 800048c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000490:	20000054 	.word	0x20000054

08000494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC1_2_IRQHandler>
	...

08000498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800049c:	4b08      	ldr	r3, [pc, #32]	@ (80004c0 <HAL_Init+0x28>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a07      	ldr	r2, [pc, #28]	@ (80004c0 <HAL_Init+0x28>)
 80004a2:	f043 0310 	orr.w	r3, r3, #16
 80004a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a8:	2003      	movs	r0, #3
 80004aa:	f000 fc4b 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ae:	200f      	movs	r0, #15
 80004b0:	f000 f808 	bl	80004c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004b4:	f7ff fee4 	bl	8000280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40022000 	.word	0x40022000

080004c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004cc:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <HAL_InitTick+0x54>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b12      	ldr	r3, [pc, #72]	@ (800051c <HAL_InitTick+0x58>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	4619      	mov	r1, r3
 80004d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004da:	fbb3 f3f1 	udiv	r3, r3, r1
 80004de:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fc63 	bl	8000dae <HAL_SYSTICK_Config>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
 80004f0:	e00e      	b.n	8000510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d80a      	bhi.n	800050e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f8:	2200      	movs	r2, #0
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000500:	f000 fc2b 	bl	8000d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000504:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <HAL_InitTick+0x5c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800050a:	2300      	movs	r3, #0
 800050c:	e000      	b.n	8000510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800050e:	2301      	movs	r3, #1
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000000 	.word	0x20000000
 800051c:	20000008 	.word	0x20000008
 8000520:	20000004 	.word	0x20000004

08000524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <HAL_IncTick+0x1c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <HAL_IncTick+0x20>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a03      	ldr	r2, [pc, #12]	@ (8000544 <HAL_IncTick+0x20>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	20000008 	.word	0x20000008
 8000544:	20000050 	.word	0x20000050

08000548 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return uwTick;
 800054c:	4b02      	ldr	r3, [pc, #8]	@ (8000558 <HAL_GetTick+0x10>)
 800054e:	681b      	ldr	r3, [r3, #0]
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	20000050 	.word	0x20000050

0800055c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e0ed      	b.n	800074a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d102      	bne.n	8000580 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff feb2 	bl	80002e4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f042 0201 	orr.w	r2, r2, #1
 800058e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000590:	f7ff ffda 	bl	8000548 <HAL_GetTick>
 8000594:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000596:	e012      	b.n	80005be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000598:	f7ff ffd6 	bl	8000548 <HAL_GetTick>
 800059c:	4602      	mov	r2, r0
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	2b0a      	cmp	r3, #10
 80005a4:	d90b      	bls.n	80005be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2205      	movs	r2, #5
 80005b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e0c5      	b.n	800074a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0e5      	beq.n	8000598 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f022 0202 	bic.w	r2, r2, #2
 80005da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005dc:	f7ff ffb4 	bl	8000548 <HAL_GetTick>
 80005e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80005e2:	e012      	b.n	800060a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80005e4:	f7ff ffb0 	bl	8000548 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	2b0a      	cmp	r3, #10
 80005f0:	d90b      	bls.n	800060a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2205      	movs	r2, #5
 8000602:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e09f      	b.n	800074a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	f003 0302 	and.w	r3, r3, #2
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1e5      	bne.n	80005e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	7e1b      	ldrb	r3, [r3, #24]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d108      	bne.n	8000632 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	e007      	b.n	8000642 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000640:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7e5b      	ldrb	r3, [r3, #25]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d108      	bne.n	800065c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	e007      	b.n	800066c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800066a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7e9b      	ldrb	r3, [r3, #26]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d108      	bne.n	8000686 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f042 0220 	orr.w	r2, r2, #32
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	e007      	b.n	8000696 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f022 0220 	bic.w	r2, r2, #32
 8000694:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7edb      	ldrb	r3, [r3, #27]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d108      	bne.n	80006b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f022 0210 	bic.w	r2, r2, #16
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	e007      	b.n	80006c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f042 0210 	orr.w	r2, r2, #16
 80006be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7f1b      	ldrb	r3, [r3, #28]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d108      	bne.n	80006da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f042 0208 	orr.w	r2, r2, #8
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	e007      	b.n	80006ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f022 0208 	bic.w	r2, r2, #8
 80006e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7f5b      	ldrb	r3, [r3, #29]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d108      	bne.n	8000704 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f042 0204 	orr.w	r2, r2, #4
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	e007      	b.n	8000714 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f022 0204 	bic.w	r2, r2, #4
 8000712:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689a      	ldr	r2, [r3, #8]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	431a      	orrs	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	431a      	orrs	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	ea42 0103 	orr.w	r1, r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	430a      	orrs	r2, r1
 8000738:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b08a      	sub	sp, #40	@ 0x28
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	691b      	ldr	r3, [r3, #16]
 8000784:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800078e:	6a3b      	ldr	r3, [r7, #32]
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	2b00      	cmp	r3, #0
 8000796:	d07c      	beq.n	8000892 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d023      	beq.n	80007ea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2201      	movs	r2, #1
 80007a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	f003 0302 	and.w	r3, r3, #2
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d003      	beq.n	80007bc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f983 	bl	8000ac0 <HAL_CAN_TxMailbox0CompleteCallback>
 80007ba:	e016      	b.n	80007ea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80007c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ce:	e00c      	b.n	80007ea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80007da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80007e2:	e002      	b.n	80007ea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f986 	bl	8000af6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d024      	beq.n	800083e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000804:	2b00      	cmp	r3, #0
 8000806:	d003      	beq.n	8000810 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 f962 	bl	8000ad2 <HAL_CAN_TxMailbox1CompleteCallback>
 800080e:	e016      	b.n	800083e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
 8000822:	e00c      	b.n	800083e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800082a:	2b00      	cmp	r3, #0
 800082c:	d004      	beq.n	8000838 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800082e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
 8000836:	e002      	b.n	800083e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 f965 	bl	8000b08 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000844:	2b00      	cmp	r3, #0
 8000846:	d024      	beq.n	8000892 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000850:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000858:	2b00      	cmp	r3, #0
 800085a:	d003      	beq.n	8000864 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 f941 	bl	8000ae4 <HAL_CAN_TxMailbox2CompleteCallback>
 8000862:	e016      	b.n	8000892 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800086a:	2b00      	cmp	r3, #0
 800086c:	d004      	beq.n	8000878 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800086e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
 8000876:	e00c      	b.n	8000892 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800087e:	2b00      	cmp	r3, #0
 8000880:	d004      	beq.n	800088c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
 800088a:	e002      	b.n	8000892 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f944 	bl	8000b1a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000892:	6a3b      	ldr	r3, [r7, #32]
 8000894:	f003 0308 	and.w	r3, r3, #8
 8000898:	2b00      	cmp	r3, #0
 800089a:	d00c      	beq.n	80008b6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d007      	beq.n	80008b6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80008a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2210      	movs	r2, #16
 80008b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80008b6:	6a3b      	ldr	r3, [r7, #32]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d00b      	beq.n	80008d8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d006      	beq.n	80008d8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2208      	movs	r2, #8
 80008d0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 f933 	bl	8000b3e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d009      	beq.n	80008f6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	f003 0303 	and.w	r3, r3, #3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d002      	beq.n	80008f6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 f91b 	bl	8000b2c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d00c      	beq.n	800091a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	2b00      	cmp	r3, #0
 8000908:	d007      	beq.n	800091a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800090a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800090c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2210      	movs	r2, #16
 8000918:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800091a:	6a3b      	ldr	r3, [r7, #32]
 800091c:	f003 0320 	and.w	r3, r3, #32
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00b      	beq.n	800093c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	2b00      	cmp	r3, #0
 800092c:	d006      	beq.n	800093c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2208      	movs	r2, #8
 8000934:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 f913 	bl	8000b62 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800093c:	6a3b      	ldr	r3, [r7, #32]
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	2b00      	cmp	r3, #0
 8000944:	d009      	beq.n	800095a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 f8fb 	bl	8000b50 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00b      	beq.n	800097c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	2b00      	cmp	r3, #0
 800096c:	d006      	beq.n	800097c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2210      	movs	r2, #16
 8000974:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 f8fc 	bl	8000b74 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00b      	beq.n	800099e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	2b00      	cmp	r3, #0
 800098e:	d006      	beq.n	800099e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2208      	movs	r2, #8
 8000996:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f000 f8f4 	bl	8000b86 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d07b      	beq.n	8000aa0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d072      	beq.n	8000a98 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d008      	beq.n	80009ce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d003      	beq.n	80009ce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80009c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80009ce:	6a3b      	ldr	r3, [r7, #32]
 80009d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d008      	beq.n	80009ea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80009e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d008      	beq.n	8000a06 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80009fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000a06:	6a3b      	ldr	r3, [r7, #32]
 8000a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d043      	beq.n	8000a98 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d03e      	beq.n	8000a98 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000a20:	2b60      	cmp	r3, #96	@ 0x60
 8000a22:	d02b      	beq.n	8000a7c <HAL_CAN_IRQHandler+0x32a>
 8000a24:	2b60      	cmp	r3, #96	@ 0x60
 8000a26:	d82e      	bhi.n	8000a86 <HAL_CAN_IRQHandler+0x334>
 8000a28:	2b50      	cmp	r3, #80	@ 0x50
 8000a2a:	d022      	beq.n	8000a72 <HAL_CAN_IRQHandler+0x320>
 8000a2c:	2b50      	cmp	r3, #80	@ 0x50
 8000a2e:	d82a      	bhi.n	8000a86 <HAL_CAN_IRQHandler+0x334>
 8000a30:	2b40      	cmp	r3, #64	@ 0x40
 8000a32:	d019      	beq.n	8000a68 <HAL_CAN_IRQHandler+0x316>
 8000a34:	2b40      	cmp	r3, #64	@ 0x40
 8000a36:	d826      	bhi.n	8000a86 <HAL_CAN_IRQHandler+0x334>
 8000a38:	2b30      	cmp	r3, #48	@ 0x30
 8000a3a:	d010      	beq.n	8000a5e <HAL_CAN_IRQHandler+0x30c>
 8000a3c:	2b30      	cmp	r3, #48	@ 0x30
 8000a3e:	d822      	bhi.n	8000a86 <HAL_CAN_IRQHandler+0x334>
 8000a40:	2b10      	cmp	r3, #16
 8000a42:	d002      	beq.n	8000a4a <HAL_CAN_IRQHandler+0x2f8>
 8000a44:	2b20      	cmp	r3, #32
 8000a46:	d005      	beq.n	8000a54 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000a48:	e01d      	b.n	8000a86 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000a52:	e019      	b.n	8000a88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000a5c:	e014      	b.n	8000a88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a60:	f043 0320 	orr.w	r3, r3, #32
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000a66:	e00f      	b.n	8000a88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000a70:	e00a      	b.n	8000a88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000a7a:	e005      	b.n	8000a88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000a84:	e000      	b.n	8000a88 <HAL_CAN_IRQHandler+0x336>
            break;
 8000a86:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	699a      	ldr	r2, [r3, #24]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000a96:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d008      	beq.n	8000ab8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aac:	431a      	orrs	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f870 	bl	8000b98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	@ 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
	...

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4906      	ldr	r1, [pc, #24]	@ (8000c44 <__NVIC_EnableIRQ+0x34>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	@ (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	@ (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
         );
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	@ 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f7ff ff90 	bl	8000c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff2d 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff42 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff90 	bl	8000c9c <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5f 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff35 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa2 	bl	8000d00 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b08b      	sub	sp, #44	@ 0x2c
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dda:	e161      	b.n	80010a0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	f040 8150 	bne.w	800109a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4a97      	ldr	r2, [pc, #604]	@ (800105c <HAL_GPIO_Init+0x294>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d05e      	beq.n	8000ec2 <HAL_GPIO_Init+0xfa>
 8000e04:	4a95      	ldr	r2, [pc, #596]	@ (800105c <HAL_GPIO_Init+0x294>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d875      	bhi.n	8000ef6 <HAL_GPIO_Init+0x12e>
 8000e0a:	4a95      	ldr	r2, [pc, #596]	@ (8001060 <HAL_GPIO_Init+0x298>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d058      	beq.n	8000ec2 <HAL_GPIO_Init+0xfa>
 8000e10:	4a93      	ldr	r2, [pc, #588]	@ (8001060 <HAL_GPIO_Init+0x298>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d86f      	bhi.n	8000ef6 <HAL_GPIO_Init+0x12e>
 8000e16:	4a93      	ldr	r2, [pc, #588]	@ (8001064 <HAL_GPIO_Init+0x29c>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d052      	beq.n	8000ec2 <HAL_GPIO_Init+0xfa>
 8000e1c:	4a91      	ldr	r2, [pc, #580]	@ (8001064 <HAL_GPIO_Init+0x29c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d869      	bhi.n	8000ef6 <HAL_GPIO_Init+0x12e>
 8000e22:	4a91      	ldr	r2, [pc, #580]	@ (8001068 <HAL_GPIO_Init+0x2a0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d04c      	beq.n	8000ec2 <HAL_GPIO_Init+0xfa>
 8000e28:	4a8f      	ldr	r2, [pc, #572]	@ (8001068 <HAL_GPIO_Init+0x2a0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d863      	bhi.n	8000ef6 <HAL_GPIO_Init+0x12e>
 8000e2e:	4a8f      	ldr	r2, [pc, #572]	@ (800106c <HAL_GPIO_Init+0x2a4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d046      	beq.n	8000ec2 <HAL_GPIO_Init+0xfa>
 8000e34:	4a8d      	ldr	r2, [pc, #564]	@ (800106c <HAL_GPIO_Init+0x2a4>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d85d      	bhi.n	8000ef6 <HAL_GPIO_Init+0x12e>
 8000e3a:	2b12      	cmp	r3, #18
 8000e3c:	d82a      	bhi.n	8000e94 <HAL_GPIO_Init+0xcc>
 8000e3e:	2b12      	cmp	r3, #18
 8000e40:	d859      	bhi.n	8000ef6 <HAL_GPIO_Init+0x12e>
 8000e42:	a201      	add	r2, pc, #4	@ (adr r2, 8000e48 <HAL_GPIO_Init+0x80>)
 8000e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e48:	08000ec3 	.word	0x08000ec3
 8000e4c:	08000e9d 	.word	0x08000e9d
 8000e50:	08000eaf 	.word	0x08000eaf
 8000e54:	08000ef1 	.word	0x08000ef1
 8000e58:	08000ef7 	.word	0x08000ef7
 8000e5c:	08000ef7 	.word	0x08000ef7
 8000e60:	08000ef7 	.word	0x08000ef7
 8000e64:	08000ef7 	.word	0x08000ef7
 8000e68:	08000ef7 	.word	0x08000ef7
 8000e6c:	08000ef7 	.word	0x08000ef7
 8000e70:	08000ef7 	.word	0x08000ef7
 8000e74:	08000ef7 	.word	0x08000ef7
 8000e78:	08000ef7 	.word	0x08000ef7
 8000e7c:	08000ef7 	.word	0x08000ef7
 8000e80:	08000ef7 	.word	0x08000ef7
 8000e84:	08000ef7 	.word	0x08000ef7
 8000e88:	08000ef7 	.word	0x08000ef7
 8000e8c:	08000ea5 	.word	0x08000ea5
 8000e90:	08000eb9 	.word	0x08000eb9
 8000e94:	4a76      	ldr	r2, [pc, #472]	@ (8001070 <HAL_GPIO_Init+0x2a8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e9a:	e02c      	b.n	8000ef6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	623b      	str	r3, [r7, #32]
          break;
 8000ea2:	e029      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	623b      	str	r3, [r7, #32]
          break;
 8000eac:	e024      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	3308      	adds	r3, #8
 8000eb4:	623b      	str	r3, [r7, #32]
          break;
 8000eb6:	e01f      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	330c      	adds	r3, #12
 8000ebe:	623b      	str	r3, [r7, #32]
          break;
 8000ec0:	e01a      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d102      	bne.n	8000ed0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	623b      	str	r3, [r7, #32]
          break;
 8000ece:	e013      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d105      	bne.n	8000ee4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	611a      	str	r2, [r3, #16]
          break;
 8000ee2:	e009      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	615a      	str	r2, [r3, #20]
          break;
 8000eee:	e003      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
          break;
 8000ef4:	e000      	b.n	8000ef8 <HAL_GPIO_Init+0x130>
          break;
 8000ef6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	2bff      	cmp	r3, #255	@ 0xff
 8000efc:	d801      	bhi.n	8000f02 <HAL_GPIO_Init+0x13a>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	e001      	b.n	8000f06 <HAL_GPIO_Init+0x13e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3304      	adds	r3, #4
 8000f06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	2bff      	cmp	r3, #255	@ 0xff
 8000f0c:	d802      	bhi.n	8000f14 <HAL_GPIO_Init+0x14c>
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	e002      	b.n	8000f1a <HAL_GPIO_Init+0x152>
 8000f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f16:	3b08      	subs	r3, #8
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	210f      	movs	r1, #15
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	6a39      	ldr	r1, [r7, #32]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	431a      	orrs	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 80a9 	beq.w	800109a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f48:	4b4a      	ldr	r3, [pc, #296]	@ (8001074 <HAL_GPIO_Init+0x2ac>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a49      	ldr	r2, [pc, #292]	@ (8001074 <HAL_GPIO_Init+0x2ac>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b47      	ldr	r3, [pc, #284]	@ (8001074 <HAL_GPIO_Init+0x2ac>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f60:	4a45      	ldr	r2, [pc, #276]	@ (8001078 <HAL_GPIO_Init+0x2b0>)
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a3d      	ldr	r2, [pc, #244]	@ (800107c <HAL_GPIO_Init+0x2b4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d00d      	beq.n	8000fa8 <HAL_GPIO_Init+0x1e0>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001080 <HAL_GPIO_Init+0x2b8>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d007      	beq.n	8000fa4 <HAL_GPIO_Init+0x1dc>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a3b      	ldr	r2, [pc, #236]	@ (8001084 <HAL_GPIO_Init+0x2bc>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d101      	bne.n	8000fa0 <HAL_GPIO_Init+0x1d8>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e004      	b.n	8000faa <HAL_GPIO_Init+0x1e2>
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e002      	b.n	8000faa <HAL_GPIO_Init+0x1e2>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_GPIO_Init+0x1e2>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fac:	f002 0203 	and.w	r2, r2, #3
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fba:	492f      	ldr	r1, [pc, #188]	@ (8001078 <HAL_GPIO_Init+0x2b0>)
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d006      	beq.n	8000fe2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	492b      	ldr	r1, [pc, #172]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	608b      	str	r3, [r1, #8]
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fe2:	4b29      	ldr	r3, [pc, #164]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4927      	ldr	r1, [pc, #156]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ffc:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	4921      	ldr	r1, [pc, #132]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	60cb      	str	r3, [r1, #12]
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800100a:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	43db      	mvns	r3, r3
 8001012:	491d      	ldr	r1, [pc, #116]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 8001014:	4013      	ands	r3, r2
 8001016:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4917      	ldr	r1, [pc, #92]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4913      	ldr	r1, [pc, #76]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 800103c:	4013      	ands	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d01f      	beq.n	800108c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	490d      	ldr	r1, [pc, #52]	@ (8001088 <HAL_GPIO_Init+0x2c0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	600b      	str	r3, [r1, #0]
 8001058:	e01f      	b.n	800109a <HAL_GPIO_Init+0x2d2>
 800105a:	bf00      	nop
 800105c:	10320000 	.word	0x10320000
 8001060:	10310000 	.word	0x10310000
 8001064:	10220000 	.word	0x10220000
 8001068:	10210000 	.word	0x10210000
 800106c:	10120000 	.word	0x10120000
 8001070:	10110000 	.word	0x10110000
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	40010800 	.word	0x40010800
 8001080:	40010c00 	.word	0x40010c00
 8001084:	40011000 	.word	0x40011000
 8001088:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <HAL_GPIO_Init+0x2f4>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	43db      	mvns	r3, r3
 8001094:	4909      	ldr	r1, [pc, #36]	@ (80010bc <HAL_GPIO_Init+0x2f4>)
 8001096:	4013      	ands	r3, r2
 8001098:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	3301      	adds	r3, #1
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a6:	fa22 f303 	lsr.w	r3, r2, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f47f ae96 	bne.w	8000ddc <HAL_GPIO_Init+0x14>
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	372c      	adds	r7, #44	@ 0x2c
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40010400 	.word	0x40010400

080010c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e272      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8087 	beq.w	80011ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010e0:	4b92      	ldr	r3, [pc, #584]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 030c 	and.w	r3, r3, #12
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d00c      	beq.n	8001106 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010ec:	4b8f      	ldr	r3, [pc, #572]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d112      	bne.n	800111e <HAL_RCC_OscConfig+0x5e>
 80010f8:	4b8c      	ldr	r3, [pc, #560]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001104:	d10b      	bne.n	800111e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001106:	4b89      	ldr	r3, [pc, #548]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d06c      	beq.n	80011ec <HAL_RCC_OscConfig+0x12c>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d168      	bne.n	80011ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e24c      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001126:	d106      	bne.n	8001136 <HAL_RCC_OscConfig+0x76>
 8001128:	4b80      	ldr	r3, [pc, #512]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a7f      	ldr	r2, [pc, #508]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 800112e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	e02e      	b.n	8001194 <HAL_RCC_OscConfig+0xd4>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x98>
 800113e:	4b7b      	ldr	r3, [pc, #492]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a7a      	ldr	r2, [pc, #488]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b78      	ldr	r3, [pc, #480]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a77      	ldr	r2, [pc, #476]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001150:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e01d      	b.n	8001194 <HAL_RCC_OscConfig+0xd4>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001160:	d10c      	bne.n	800117c <HAL_RCC_OscConfig+0xbc>
 8001162:	4b72      	ldr	r3, [pc, #456]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a71      	ldr	r2, [pc, #452]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	4b6f      	ldr	r3, [pc, #444]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a6e      	ldr	r2, [pc, #440]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e00b      	b.n	8001194 <HAL_RCC_OscConfig+0xd4>
 800117c:	4b6b      	ldr	r3, [pc, #428]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a6a      	ldr	r2, [pc, #424]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b68      	ldr	r3, [pc, #416]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a67      	ldr	r2, [pc, #412]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 800118e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001192:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d013      	beq.n	80011c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff f9d4 	bl	8000548 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff f9d0 	bl	8000548 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	@ 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e200      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b6:	4b5d      	ldr	r3, [pc, #372]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0xe4>
 80011c2:	e014      	b.n	80011ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff f9c0 	bl	8000548 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011cc:	f7ff f9bc 	bl	8000548 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b64      	cmp	r3, #100	@ 0x64
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e1ec      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011de:	4b53      	ldr	r3, [pc, #332]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x10c>
 80011ea:	e000      	b.n	80011ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d063      	beq.n	80012c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011fa:	4b4c      	ldr	r3, [pc, #304]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00b      	beq.n	800121e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001206:	4b49      	ldr	r3, [pc, #292]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b08      	cmp	r3, #8
 8001210:	d11c      	bne.n	800124c <HAL_RCC_OscConfig+0x18c>
 8001212:	4b46      	ldr	r3, [pc, #280]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d116      	bne.n	800124c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121e:	4b43      	ldr	r3, [pc, #268]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <HAL_RCC_OscConfig+0x176>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d001      	beq.n	8001236 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e1c0      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001236:	4b3d      	ldr	r3, [pc, #244]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4939      	ldr	r1, [pc, #228]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124a:	e03a      	b.n	80012c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d020      	beq.n	8001296 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001254:	4b36      	ldr	r3, [pc, #216]	@ (8001330 <HAL_RCC_OscConfig+0x270>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125a:	f7ff f975 	bl	8000548 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001262:	f7ff f971 	bl	8000548 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e1a1      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001274:	4b2d      	ldr	r3, [pc, #180]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001280:	4b2a      	ldr	r3, [pc, #168]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	4927      	ldr	r1, [pc, #156]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
 8001294:	e015      	b.n	80012c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001296:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <HAL_RCC_OscConfig+0x270>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff f954 	bl	8000548 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a4:	f7ff f950 	bl	8000548 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e180      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b6:	4b1d      	ldr	r3, [pc, #116]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d03a      	beq.n	8001344 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d019      	beq.n	800130a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d6:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <HAL_RCC_OscConfig+0x274>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012dc:	f7ff f934 	bl	8000548 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e4:	f7ff f930 	bl	8000548 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e160      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f6:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <HAL_RCC_OscConfig+0x26c>)
 80012f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f000 fa9c 	bl	8001840 <RCC_Delay>
 8001308:	e01c      	b.n	8001344 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130a:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <HAL_RCC_OscConfig+0x274>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001310:	f7ff f91a 	bl	8000548 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001316:	e00f      	b.n	8001338 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001318:	f7ff f916 	bl	8000548 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d908      	bls.n	8001338 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e146      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	42420000 	.word	0x42420000
 8001334:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001338:	4b92      	ldr	r3, [pc, #584]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 800133a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e9      	bne.n	8001318 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80a6 	beq.w	800149e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001356:	4b8b      	ldr	r3, [pc, #556]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10d      	bne.n	800137e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	4b88      	ldr	r3, [pc, #544]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a87      	ldr	r2, [pc, #540]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136c:	61d3      	str	r3, [r2, #28]
 800136e:	4b85      	ldr	r3, [pc, #532]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800137a:	2301      	movs	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b82      	ldr	r3, [pc, #520]	@ (8001588 <HAL_RCC_OscConfig+0x4c8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d118      	bne.n	80013bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138a:	4b7f      	ldr	r3, [pc, #508]	@ (8001588 <HAL_RCC_OscConfig+0x4c8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a7e      	ldr	r2, [pc, #504]	@ (8001588 <HAL_RCC_OscConfig+0x4c8>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001396:	f7ff f8d7 	bl	8000548 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139e:	f7ff f8d3 	bl	8000548 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b64      	cmp	r3, #100	@ 0x64
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e103      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4b75      	ldr	r3, [pc, #468]	@ (8001588 <HAL_RCC_OscConfig+0x4c8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x312>
 80013c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4a6e      	ldr	r2, [pc, #440]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6213      	str	r3, [r2, #32]
 80013d0:	e02d      	b.n	800142e <HAL_RCC_OscConfig+0x36e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x334>
 80013da:	4b6a      	ldr	r3, [pc, #424]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a69      	ldr	r2, [pc, #420]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6213      	str	r3, [r2, #32]
 80013e6:	4b67      	ldr	r3, [pc, #412]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a66      	ldr	r2, [pc, #408]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	f023 0304 	bic.w	r3, r3, #4
 80013f0:	6213      	str	r3, [r2, #32]
 80013f2:	e01c      	b.n	800142e <HAL_RCC_OscConfig+0x36e>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b05      	cmp	r3, #5
 80013fa:	d10c      	bne.n	8001416 <HAL_RCC_OscConfig+0x356>
 80013fc:	4b61      	ldr	r3, [pc, #388]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	4a60      	ldr	r2, [pc, #384]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6213      	str	r3, [r2, #32]
 8001408:	4b5e      	ldr	r3, [pc, #376]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	4a5d      	ldr	r2, [pc, #372]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6213      	str	r3, [r2, #32]
 8001414:	e00b      	b.n	800142e <HAL_RCC_OscConfig+0x36e>
 8001416:	4b5b      	ldr	r3, [pc, #364]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	4a5a      	ldr	r2, [pc, #360]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	6213      	str	r3, [r2, #32]
 8001422:	4b58      	ldr	r3, [pc, #352]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4a57      	ldr	r2, [pc, #348]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	f023 0304 	bic.w	r3, r3, #4
 800142c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d015      	beq.n	8001462 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff f887 	bl	8000548 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	e00a      	b.n	8001454 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143e:	f7ff f883 	bl	8000548 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800144c:	4293      	cmp	r3, r2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e0b1      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	4b4b      	ldr	r3, [pc, #300]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0ee      	beq.n	800143e <HAL_RCC_OscConfig+0x37e>
 8001460:	e014      	b.n	800148c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff f871 	bl	8000548 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001468:	e00a      	b.n	8001480 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146a:	f7ff f86d 	bl	8000548 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001478:	4293      	cmp	r3, r2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e09b      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001480:	4b40      	ldr	r3, [pc, #256]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ee      	bne.n	800146a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d105      	bne.n	800149e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001492:	4b3c      	ldr	r3, [pc, #240]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a3b      	ldr	r2, [pc, #236]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800149c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 8087 	beq.w	80015b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a8:	4b36      	ldr	r3, [pc, #216]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d061      	beq.n	8001578 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d146      	bne.n	800154a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014bc:	4b33      	ldr	r3, [pc, #204]	@ (800158c <HAL_RCC_OscConfig+0x4cc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff f841 	bl	8000548 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ca:	f7ff f83d 	bl	8000548 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e06d      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014dc:	4b29      	ldr	r3, [pc, #164]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f0      	bne.n	80014ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f0:	d108      	bne.n	8001504 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014f2:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	4921      	ldr	r1, [pc, #132]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a19      	ldr	r1, [r3, #32]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001514:	430b      	orrs	r3, r1
 8001516:	491b      	ldr	r1, [pc, #108]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <HAL_RCC_OscConfig+0x4cc>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff f811 	bl	8000548 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff f80d 	bl	8000548 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e03d      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800153c:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x46a>
 8001548:	e035      	b.n	80015b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <HAL_RCC_OscConfig+0x4cc>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7fe fffa 	bl	8000548 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001558:	f7fe fff6 	bl	8000548 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e026      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x498>
 8001576:	e01e      	b.n	80015b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d107      	bne.n	8001590 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e019      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
 8001584:	40021000 	.word	0x40021000
 8001588:	40007000 	.word	0x40007000
 800158c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001590:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <HAL_RCC_OscConfig+0x500>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021000 	.word	0x40021000

080015c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0d0      	b.n	800177a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001784 <HAL_RCC_ClockConfig+0x1c0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d910      	bls.n	8001608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4b67      	ldr	r3, [pc, #412]	@ (8001784 <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 0207 	bic.w	r2, r3, #7
 80015ee:	4965      	ldr	r1, [pc, #404]	@ (8001784 <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f6:	4b63      	ldr	r3, [pc, #396]	@ (8001784 <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d001      	beq.n	8001608 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0b8      	b.n	800177a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d020      	beq.n	8001656 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001620:	4b59      	ldr	r3, [pc, #356]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a58      	ldr	r2, [pc, #352]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800162a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001638:	4b53      	ldr	r3, [pc, #332]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4a52      	ldr	r2, [pc, #328]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001642:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001644:	4b50      	ldr	r3, [pc, #320]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	494d      	ldr	r1, [pc, #308]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d040      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	4b47      	ldr	r3, [pc, #284]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d115      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e07f      	b.n	800177a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001682:	4b41      	ldr	r3, [pc, #260]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e073      	b.n	800177a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001692:	4b3d      	ldr	r3, [pc, #244]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e06b      	b.n	800177a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a2:	4b39      	ldr	r3, [pc, #228]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f023 0203 	bic.w	r2, r3, #3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4936      	ldr	r1, [pc, #216]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b4:	f7fe ff48 	bl	8000548 <HAL_GetTick>
 80016b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016bc:	f7fe ff44 	bl	8000548 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e053      	b.n	800177a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 020c 	and.w	r2, r3, #12
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d1eb      	bne.n	80016bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016e4:	4b27      	ldr	r3, [pc, #156]	@ (8001784 <HAL_RCC_ClockConfig+0x1c0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d210      	bcs.n	8001714 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 0207 	bic.w	r2, r3, #7
 80016fa:	4922      	ldr	r1, [pc, #136]	@ (8001784 <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001702:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e032      	b.n	800177a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d008      	beq.n	8001732 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4916      	ldr	r1, [pc, #88]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d009      	beq.n	8001752 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800173e:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	490e      	ldr	r1, [pc, #56]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001752:	f000 f821 	bl	8001798 <HAL_RCC_GetSysClockFreq>
 8001756:	4602      	mov	r2, r0
 8001758:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	490a      	ldr	r1, [pc, #40]	@ (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001764:	5ccb      	ldrb	r3, [r1, r3]
 8001766:	fa22 f303 	lsr.w	r3, r2, r3
 800176a:	4a09      	ldr	r2, [pc, #36]	@ (8001790 <HAL_RCC_ClockConfig+0x1cc>)
 800176c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <HAL_RCC_ClockConfig+0x1d0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fea6 	bl	80004c4 <HAL_InitTick>

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40022000 	.word	0x40022000
 8001788:	40021000 	.word	0x40021000
 800178c:	080018ec 	.word	0x080018ec
 8001790:	20000000 	.word	0x20000000
 8001794:	20000004 	.word	0x20000004

08001798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <HAL_RCC_GetSysClockFreq+0x94>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d002      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x30>
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0x36>
 80017c6:	e027      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ca:	613b      	str	r3, [r7, #16]
      break;
 80017cc:	e027      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	0c9b      	lsrs	r3, r3, #18
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	4a17      	ldr	r2, [pc, #92]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d010      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <HAL_RCC_GetSysClockFreq+0x94>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	0c5b      	lsrs	r3, r3, #17
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	4a11      	ldr	r2, [pc, #68]	@ (8001838 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <HAL_RCC_GetSysClockFreq+0x98>)
 80017fa:	fb03 f202 	mul.w	r2, r3, r2
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e004      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a0c      	ldr	r2, [pc, #48]	@ (800183c <HAL_RCC_GetSysClockFreq+0xa4>)
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	613b      	str	r3, [r7, #16]
      break;
 8001816:	e002      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_RCC_GetSysClockFreq+0x98>)
 800181a:	613b      	str	r3, [r7, #16]
      break;
 800181c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800181e:	693b      	ldr	r3, [r7, #16]
}
 8001820:	4618      	mov	r0, r3
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	007a1200 	.word	0x007a1200
 8001834:	080018fc 	.word	0x080018fc
 8001838:	0800190c 	.word	0x0800190c
 800183c:	003d0900 	.word	0x003d0900

08001840 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001848:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <RCC_Delay+0x34>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <RCC_Delay+0x38>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0a5b      	lsrs	r3, r3, #9
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800185c:	bf00      	nop
  }
  while (Delay --);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	60fa      	str	r2, [r7, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f9      	bne.n	800185c <RCC_Delay+0x1c>
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	20000000 	.word	0x20000000
 8001878:	10624dd3 	.word	0x10624dd3

0800187c <memset>:
 800187c:	4603      	mov	r3, r0
 800187e:	4402      	add	r2, r0
 8001880:	4293      	cmp	r3, r2
 8001882:	d100      	bne.n	8001886 <memset+0xa>
 8001884:	4770      	bx	lr
 8001886:	f803 1b01 	strb.w	r1, [r3], #1
 800188a:	e7f9      	b.n	8001880 <memset+0x4>

0800188c <__libc_init_array>:
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	2600      	movs	r6, #0
 8001890:	4d0c      	ldr	r5, [pc, #48]	@ (80018c4 <__libc_init_array+0x38>)
 8001892:	4c0d      	ldr	r4, [pc, #52]	@ (80018c8 <__libc_init_array+0x3c>)
 8001894:	1b64      	subs	r4, r4, r5
 8001896:	10a4      	asrs	r4, r4, #2
 8001898:	42a6      	cmp	r6, r4
 800189a:	d109      	bne.n	80018b0 <__libc_init_array+0x24>
 800189c:	f000 f81a 	bl	80018d4 <_init>
 80018a0:	2600      	movs	r6, #0
 80018a2:	4d0a      	ldr	r5, [pc, #40]	@ (80018cc <__libc_init_array+0x40>)
 80018a4:	4c0a      	ldr	r4, [pc, #40]	@ (80018d0 <__libc_init_array+0x44>)
 80018a6:	1b64      	subs	r4, r4, r5
 80018a8:	10a4      	asrs	r4, r4, #2
 80018aa:	42a6      	cmp	r6, r4
 80018ac:	d105      	bne.n	80018ba <__libc_init_array+0x2e>
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
 80018b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b4:	4798      	blx	r3
 80018b6:	3601      	adds	r6, #1
 80018b8:	e7ee      	b.n	8001898 <__libc_init_array+0xc>
 80018ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80018be:	4798      	blx	r3
 80018c0:	3601      	adds	r6, #1
 80018c2:	e7f2      	b.n	80018aa <__libc_init_array+0x1e>
 80018c4:	08001910 	.word	0x08001910
 80018c8:	08001910 	.word	0x08001910
 80018cc:	08001910 	.word	0x08001910
 80018d0:	08001914 	.word	0x08001914

080018d4 <_init>:
 80018d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d6:	bf00      	nop
 80018d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018da:	bc08      	pop	{r3}
 80018dc:	469e      	mov	lr, r3
 80018de:	4770      	bx	lr

080018e0 <_fini>:
 80018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e2:	bf00      	nop
 80018e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018e6:	bc08      	pop	{r3}
 80018e8:	469e      	mov	lr, r3
 80018ea:	4770      	bx	lr
